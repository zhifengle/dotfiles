" readme {{{
" put plug.vim in autoload dir
" https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" key bind
" leader 2 nerdtree, leader 3 tagbar
" install universal-ctags
" cpp: leader 5 make, leader 6 run demo
" python: F5 use python in environment, F6 use user defined python path
" use config file in another machine need to do some modification
" linux {{{
" DejaVuSansMono NF
" fzf need install ripgrep
    " config: export FZF_DEFAULT_COMMAND='rg --files'
" }}}
" window {{{
" font: DejaVuSansMono NF or JetBrainsMono NF
" }}}

"}}}
" auto install plug-vim {{{
set nocompatible
if has("win32")
    if empty(glob('~/vimfiles/autoload/plug.vim')) &&  executable('curl')
        cd $HOME
        silent !curl -fLo vimfiles/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    call plug#begin('~/vimfiles/bundle')
else
    if empty(glob('~/.vim/autoload/plug.vim')) &&  executable('curl')
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    call plug#begin('~/.vim/bundle')
endif
" }}}
" before load plugins{{{
set termguicolors
" }}}
" packages {{{
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
    \ | Plug 'junegunn/gv.vim', {'on': 'GV'}
    \ | Plug 'christoomey/vim-conflicted', {'on': 'Conflicted'}
    \ | Plug 'rbong/vim-flog', { 'on': 'Flog'}
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-obsession'
Plug 'preservim/nerdcommenter'
Plug 'preservim/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFromBookmark'] }
"Plug 'preservim/tagbar'
if executable("ctags")
    Plug 'liuchengxu/vista.vim'
endif
Plug 'ctrlpvim/ctrlp.vim'
Plug 'vimwiki/vimwiki', {'branch': 'dev'}
Plug 'mattn/calendar-vim', {'for': 'vimwiki'}
Plug 'jiangmiao/auto-pairs'
Plug 'godlygeek/tabular', { 'on': 'Tabularize' }
Plug 'vim-airline/vim-airline', { 'on': 'AirlineToggle' }
Plug 'Valloric/ListToggle'
Plug 'vim-scripts/Modeliner', { 'on': 'Modeliner' }
"Plug 'w0rp/ale'
"Plug 'vim-syntastic/syntastic'
"Plug 'roxma/vim-paste-easy'
Plug 'sickill/vim-pasta'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'editorconfig/editorconfig-vim', { 'on': [] }
"Plug 'haya14busa/vim-asterisk'
Plug 'andymass/vim-matchup'
Plug 'Chiel92/vim-autoformat', {'on': 'Autoformat'}
Plug 'nathanaelkane/vim-indent-guides', { 'on': 'IndentGuidesToggle' }
" Colorscheme
Plug 'lifepillar/vim-solarized8'
Plug 'rakr/vim-one'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
if has("nvim")
    "Plug 'mattn/emmet-vim', { 'on': 'EmmetInstall' }
else
    Plug 'easymotion/vim-easymotion'
    Plug 'sheerun/vim-polyglot'
endif
call plug#end()
"}}}

" load core confg files {{{
let s:core_conf_files = [
            "\ 'globals.vim',
            \ 'options.vim',
            \ 'mappings.vim',
            \ 'plugins.vim',
            "\ 'themes.vim'
            \ ]

for s:fname in s:core_conf_files
    execute printf('source %s/core/%s', expand('<sfile>:p:h'), s:fname)
endfor
" core config }}}

let g:coc_start_at_startup = 0
if !has("nvim")
    let g:coc_start_at_startup = 0
endif
" web development setting{{{
func! ToggleJsFiletype() "{{{
    if &filetype == 'javascript'
        setlocal ft=javascript.jsx
    elseif &filetype == 'javascript.jsx'
        setlocal ft=javascript
    endif
endfunc
"}}}
fun! EnableALEFix() "{{{
    let g:ale_fix_on_save = 1
endfunc
command! -nargs=* EnableALEFix call EnableALEFix()
"}}}
let g:jsx_ext_required = 0
autocmd BufRead,BufNewFile *.js nnoremap <F6> :%s/class=/className=/g<CR>
"autocmd BufRead,BufNewFile *.js nmap <F7> :call ToggleJsFiletype()<CR>
autocmd BufRead,BufNewFile *.scss set filetype=scss.css
"autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css
autocmd FileType vue setlocal suffixesadd=.vue,.js
"autocmd FileType vue syntax sync fromstart
" }}}
