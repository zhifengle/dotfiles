" readme {{{
" put plug.vim in autoload dir
" https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" key bind
" leader 2 nerdtree, leader 3 tagbar
" cpp: leader 5 make, leader 6 run demo
" python: F5 use python in environment, F6 use user defined python path
" use config file in another machine need to do some modification
" use eslint
" JS optional dependency
" js-beautify eslint_d jsctags
" linux {{{
" font: DejaVu\ Sans\ Mono\
" DejaVuSansMono
" install ctags
" fzf need install ripgrep
    " config: export FZF_DEFAULT_COMMAND='rg --files'
" }}}
" window {{{
" font: yahei_mono and DejaVu
" need config eslint_d path, vimwiki path
" check executable('cl') use ycm or not
" }}}

"}}}
" auto install plug-vim {{{
set nocompatible
if has("win32")
    if empty(glob('~/vimfiles/autoload/plug.vim')) &&  executable('curl')
        cd $HOME
        silent !curl -fLo vimfiles/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    call plug#begin('~/vimfiles/bundle')
else
    if empty(glob('~/.vim/autoload/plug.vim')) &&  executable('curl')
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    call plug#begin('~/.vim/bundle')
endif
" }}}
" before load plugins{{{
set termguicolors
" }}}
" packages {{{
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-obsession'
Plug 'easymotion/vim-easymotion'
Plug 'mattn/emmet-vim'
Plug 'preservim/nerdcommenter'
Plug 'preservim/nerdtree', { 'on':  'NERDTreeToggle' } | Plug '22earth/nerdtree-execute', { 'on':  'NERDTreeToggle' }
Plug 'vimwiki/vimwiki'
Plug 'mattn/calendar-vim', {'for': 'vimwiki'}
Plug 'jiangmiao/auto-pairs'
Plug 'godlygeek/tabular', { 'on': 'Tabularize' }
Plug 'vim-airline/vim-airline', { 'on': 'AirlineToggle' }
Plug 'majutsushi/tagbar'
Plug 'Valloric/ListToggle'
Plug 'vim-scripts/Modeliner', { 'on': 'Modeliner' }
"Plug 'w0rp/ale'
"Plug 'vim-syntastic/syntastic'
"Plug 'roxma/vim-paste-easy'
Plug 'sickill/vim-pasta'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'editorconfig/editorconfig-vim', { 'on': [] }
"Plug 'haya14busa/vim-asterisk'
Plug 'andymass/vim-matchup'
" Colorscheme
"Plug 'lifepillar/vim-solarized8'
Plug 'rakr/vim-one'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
if has("win32")
    "Plug 'ervandew/supertab'
    "Plug 'davidhalter/jedi-vim'
    "Plug 'ternjs/tern_for_vim'
elseif has("unix")
    "Plug 'ervandew/supertab'
    "if executable('npm')
    "    Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
    "endif
    "Plug 'davidhalter/jedi-vim'
    "Plug 'racer-rust/vim-racer'
    "Plug 'ycm-core/YouCompleteMe'
    Plug 'lilydjwg/fcitx.vim'
    "Plug 'eagletmt/ghcmod-vim'
    "Plug 'eagletmt/neco-ghc'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
endif
if !executable('fzf')
    Plug 'ctrlpvim/ctrlp.vim'
endif
" web development
Plug 'sheerun/vim-polyglot'
Plug 'hail2u/vim-css3-syntax'
"Plug '22earth/vim-node', { 'branch': 'patch-2' }
Plug 'lilydjwg/colorizer', { 'on': 'ColorHighlight' }
Plug 'Chiel92/vim-autoformat', {'on': 'Autoformat'}
" Rust
"Plug 'rust-lang/rust.vim'
Plug 'tweekmonster/startuptime.vim', { 'on': 'StartupTime' }
Plug 'nathanaelkane/vim-indent-guides', { 'on': 'IndentGuidesToggle' }
" 2019-06-26 11:29
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-syntax'
Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java', 'javascript'] }
Plug 'thinca/vim-textobj-function-javascript'
Plug 'sgur/vim-textobj-parameter'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & npm install'  }
call plug#end()
"}}}

" default setting for me {{{
let mapleader="\<Space>"
let maplocalleader="\<Space>"
if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif
set bs=2 "set backspace=indent,eol,start
"解决中文乱码 ,gb2312,big5,gb18030,cp936
set enc=utf-8
"set fileencoding=utf-8 "保存文件时编码
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set number
"set cc=80
syntax on "打开高亮
set autoread
set wildmenu
"set cul "高亮光标所在行
"set cuc
set showcmd
"set autochdir
set fdm=marker "marker indent
"set nofoldenable
"set foldlevelstart=99
set complete-=i
set completeopt=longest,menu
set nobackup "覆盖文件不备份
set noswapfile "编辑时不产生交换文件
set showmatch
set vb t_vb= "关闭响铃和闪屏
set ruler
"set nohls "不高亮显示结果
set hls
set incsearch "在输入要搜索的文字时，vim会实时匹配
set fileformats=unix,dos
" colorscheme
set background=light
colorscheme one "solarized8_flat desert molokai
"缩进设置
filetype indent on
set tabstop=4 "让一个tab等于4个空格
set shiftwidth=4 "sw=4
set expandtab "插入tab时以空格替换et
"set softtabstop=4 "sts
set smarttab "开启新行的sta
set autoindent "自动缩进
set smartindent "智能自动缩进
set diffopt+=iwhite
" vim8
"packadd! matchit

augroup E_indent
    autocmd FileType python setlocal ts=4 sw=4 et sta
    autocmd FileType make setlocal ts=8 sw=8 noexpandtab
    " indent for web
    autocmd FileType json,vue,javascript,typescript,html,css,scss,less setlocal ts=2 sw=2  et
augroup END
"}}}

" setting for linux {{{
if has("unix")
    set guifont=DejaVu\ Sans\ Mono\ 13
    "set guifont=Fira\ Code\ Medium\ 13
    "set guifont=Yahei\ Mono\ 13
    "set guifont=Source\ Code\ Pro\ 13
    let g:vimwiki_use_mouse = 1

    let wiki_2 = {}
    let wiki_2.path = '~/my_notes/'
    let wiki_2.index = 'my_markdown_notes'
    let wiki_2.syntax = 'markdown'
    let wiki_2.ext = '.md'

    let g:vimwiki_list = [wiki_2]
    map <silent> <Leader>ee :e $HOME/.vim/vimrc<cr>
    " has gui  gvim
    "key binding for compile or run {{{
    augroup E_run_file
        autocmd!
        autocmd BufRead,BufNewFile *.c nmap <Leader>5 :w<CR>:!gcc -Wall % -g -o %<<CR>
        autocmd FileType cpp nmap <Leader>5 :update<CR>:!g++ -Wall % -g -o %<<CR>
        autocmd FileType c,cpp nmap <Leader>6 :!./%<<CR>
        autocmd FileType c,cpp nmap <F5> :update<CR>:make<CR>
        autocmd FileType c,cpp nmap <F6> :!./demo<CR>
        autocmd FileType sh nmap <Leader>5 :update<CR>:!bash %<CR>
        autocmd BufRead,BufNewFile *.py nmap <Leader>6 :update<CR>:!$HOME/.pyenv/versions/env3/bin/python %<CR>
        autocmd BufRead,BufNewFile *.hs nmap <F5> :update<CR>:!runghc %<CR>
        autocmd BufRead,BufNewFile *.hs nmap <F6> :update<CR>:!ghci %<CR>
        autocmd BufNewFile,BufRead *.coffee nmap <F5> :update<CR>:!coffee -c %<CR>:!node %<.js <CR>
        "au BufRead,BufNewFile *.scm nmap <F5> :w<CR>:!mit-scheme --load %<CR>
        autocmd BufRead,BufNewFile *.rkt,*scm nmap <F5> :update<CR>:!racket %<CR>
        autocmd BufRead,BufNewFile *.go nmap <Leader>5 :update<CR>:GoRun<CR>
    augroup END
    "}}}
    "autocmd FileType javascript set dictionary=~/.vim/dict/javascript.dict
    "autocmd FileType html set dictionary=~/.vim/dict/bootstrap.dict
    "au FileType c set dictionary=~/.vim/dict/c.dict
    " test pluins' setting for linux
endif
"'python' : 1
"end of setting for linux}}}

" setting for gvim or terminal {{{
if has("gui_running") || (has("nvim") && has("win32"))
    " 只显示菜单
    set guioptions=
    set lines=36
    set columns=90
    " 高亮光标所在的行
    "set cursorline
    "setting for windows {{{
    if has("win32")
        " Windows 兼容配置
        set guifont=DejaVu_Sans_Mono:h14:cANSI
        "set guifontwide=Yahei_Mono:b:h13:cGB2312
        "autocmd GUIEnter * simalt ~x "最大化gvim
        "source $VIMRUNTIME/mswin.vim
        source $VIMRUNTIME/menu.vim
        source $ViMRUnTIME/delmenu.vim
        "source $VIMRUNTIME/vimrc_example.vim
        "set fileformats=dos
        "解决consle输出乱码
        language messages zh_CN.utf-8
        " compile and run {{{
        func! Interpreter()
            if &filetype=='scheme'
                exec "w"
                exec "!\"D:\\MIT-GNU Scheme\\bin\\mit-scheme.exe\" --library \"d:\\MIT-GNU Scheme\\lib\" --load ".expand("%:p")
            endif
        endfunc
        map <silent> <Leader>ee :e ~/vimfiles/vimrc<cr>
        augroup E_run_file_win
            autocmd!
            autocmd BufRead,BufNewFile *.scm map <F5> :w<CR>:call Interpreter()<CR>
            autocmd BufRead,BufNewFile *.rkt,*scm nmap <F6> :w<CR>:!racket %<CR>
            "autocmd BufRead *.py nmap <C-F5> :w<CR>:!idle.py -r %<CR>
            autocmd BufRead *.py nmap <C-F5> :w<CR>:!ipython -i %<CR>
            "autocmd BufRead *.py nmap <S-F5> :w<CR>:!idle.py -e %<CR>
            autocmd BufRead,BufNewFile *.c nmap <Leader>5 :w<CR>:!gcc -Wall % -g -o %<.exe<CR>
            autocmd FileType cpp nmap <Leader>5 :w<CR>:!g++ -Wall % -g -o %<.exe<CR>
            autocmd FileType c,cpp nmap <Leader>6 :!%<.exe<CR>
        augroup END
        " }}}
        "vimwiki
        let g:vimwiki_use_mouse = 1

        let wiki_2 = {}
        let wiki_2.path = 'E:/my_notes/'
        let wiki_2.index = 'my_markdown_notes'
        let wiki_2.syntax = 'markdown'
        let wiki_2.ext = '.md'

        let g:vimwiki_list = [wiki_2]
    endif
    " end of setting for windows }}}
else
    "xfce4-terminal
    "set t_Co=256
    " tmux colors
    "let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    "let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    if !has('nvim') && &ttimeoutlen == -1
        set ttimeout
        set ttimeoutlen=100
    endif
endif
" gvim }}}

"map setting{{{
" F2:NERDTreeToggle  F3:tagbar F4 F6 F7 F8 F9:c F10:c run
" 普通模式下 Ctrl+c 复制文件路径
"nnoremap <c-c> :let @* = expand('%:p')<cr>
"inoremap jk <Esc>
" Buffers/Tab操作快捷方式!
"nnoremap <s-h> :bprevious<cr>
"nnoremap <s-l> :bnext<cr>
"nnoremap F :tabe %
"vmap <C-C> "+y
" ctrl+s, need set alias vim="stty stop '' -ixoff ; vim"
map <C-S> :update<CR>
vmap <C-S> <C-C>:update<CR>
imap <C-S> <C-O>:update<CR>
nnoremap <Leader>ew :update<CR>
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif
if (has("gui_running")) || has("win32")
    map <M-1> 1gt
    map <M-2> 2gt
    map <M-3> 3gt
    map <M-4> 4gt
    map <M-5> 5gt
endif
""""""""""""""""""""
"  Leader key map  "
""""""""""""""""""""
nnoremap <Leader>y "+y
nnoremap <Leader>p moo<Esc>"+p`[v`]=`o
nnoremap <Leader>P moO<Esc>"+P`[v`]=`o
vnoremap <Leader>p "+p`[v`]=
vnoremap <Leader>P "+P`[v`]=
vnoremap <Leader>y "+y

"nnoremap <Leader>te :tabe<space>
" grep word under cursor
nnoremap <Leader>fg :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

if exists('g:plugs["ale"]')
    nnoremap <Leader>es :ALEFix<CR>
endif
" format
nnoremap <Leader>em :%s/\r//g<CR>:w<CR>
nnoremap <Leader>ef :Autoformat<CR>
nnoremap <Leader>ec :call plug#load('editorconfig-vim')<CR>:EditorConfigReload<CR>:e! %<CR>
nnoremap <Leader>ed :lcd %:p:h<CR>
nnoremap <Leader>e2 :setlocal ts=2 sw=2 et<CR>
nnoremap <Leader>e4 :setlocal ts=4 sw=4 et<CR>
command! FcitxVim execute "call plug#load('fcitx.vim') | set ttimeoutlen=100"
" 快捷键 i 开/关缩进可视化
nnoremap <silent> <Leader>ei :IndentGuidesToggle<CR>

vmap <silent> <Leader>c<Space> <Plug>NERDCommenterToggle
nmap <silent> <Leader>c<Space> <Plug>NERDCommenterToggle
if !has("gui_running")
    nmap <silent> <C-_> <Plug>NERDCommenterToggle
endif
if executable('fzf') && exists('g:plugs["fzf.vim"]')
    nnoremap <C-p> :FZF<CR>
    nnoremap <Leader>b :Buffers<CR>
    nnoremap <Leader>fl :Lines<CR>
else
    "nnoremap <Leader>b :Unite buffer<CR>
    nnoremap <Leader>b :CtrlPBuffer<CR>
    nnoremap <Leader>fl :CtrlPLine<CR>
endif
" git
nnoremap <Leader>gs :Git<CR>
nnoremap <Leader>gl :GV!<CR>

augroup E_map_setting
    autocmd!
    " 自动运用设置
    autocmd BufWritePost .vimrc,.gvimrc,_vimrc silent source %
    autocmd FileType vimwiki map <F8> :Calendar<CR>
    " no auto indent when pasting
    autocmd FileType vimwiki nnoremap <Leader>p moo<Esc>"+p`o
    autocmd FileType qf nnoremap <buffer> o <CR><C-w>j
augroup end
augroup E_run_map_setting
    autocmd!
    autocmd BufRead,BufNewFile *.py nmap <Leader>5 :update<CR>:!python %<CR>
    autocmd BufRead,BufNewFile *.js nmap <Leader>5 :update<CR>:!node %<CR>
    autocmd BufRead,BufNewFile *.ts nmap <Leader>5 :update<CR>:!ts-node %<CR>
    autocmd BufRead,BufNewFile *.rs nmap <Leader>5 :update<CR>:!cargo run<CR>
    autocmd BufRead,BufNewFile *.rs nmap <Leader>6 :update<CR>:!cargo test<CR>
augroup end
"}}}

" web development setting{{{
func! ToggleJsFiletype() "{{{
    if &filetype == 'javascript'
        setlocal ft=javascript.jsx
    elseif &filetype == 'javascript.jsx'
        setlocal ft=javascript
    endif
endfunc
"}}}
fun! EnableALEFix() "{{{
    let g:ale_fix_on_save = 1
endfunc
command! -nargs=* EnableALEFix call EnableALEFix()
"}}}
let g:jsx_ext_required = 0
autocmd BufRead,BufNewFile *.js nnoremap <F6> :%s/class=/className=/g<CR>
"autocmd BufRead,BufNewFile *.js nmap <F7> :call ToggleJsFiletype()<CR>
autocmd BufRead,BufNewFile *.scss set filetype=scss.css
"autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css
autocmd FileType vue setlocal suffixesadd=.vue,.js
"autocmd FileType vue syntax sync fromstart
" }}}
" python setting{{{

let tlist_txt_settings = 'txt;c:content;f:figures;t:tables' "language definition for plain text
autocmd FileType python setlocal foldmethod=indent foldlevel=99

" }}}
" cpp setting {{{
func FormatCppCode(style)
  let firstline=line(".")
  let lastline=line(".")
  " Visual mode
  if exists(a:firstline)
    firstline = a:firstline
    lastline = a:lastline
  endif
  let g:formatdef_clangformat = "'clang-format --lines='.a:firstline.':'.a:lastline.' --assume-filename='.bufname('%').' -style=" . a:style . "'"
  let formatcommand = ":" . firstline . "," . lastline . "Autoformat"
  exec formatcommand
endfunc
"let g:formatdef_clangformat = "'clang-format -style=Chromium'"
autocmd FileType cpp nnoremap <silent> <Leader>ef :call FormatCppCode("Chromium")<CR>
" }}}
" Haskell setting{{{
" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
            \ ts=8 et sw=4 softtabstop=4 shiftround
let g:haskell_indent_disable=1
autocmd FileType haskell map <silent> tw :update<CR>:GhcModTypeInsert<CR>
autocmd FileType haskell map <silent> ts :update<CR>:GhcModSplitFunCase<CR>
autocmd FileType haskell map <silent> tq :update<CR>:GhcModType<CR>
autocmd FileType haskell map <silent> te :update<CR>:GhcModTypeClear<CR>
autocmd FileType haskell vnoremap <LocalLeader>a= :Tabularize /=<CR>
autocmd FileType haskell vnoremap <LocalLeader>a; :Tabularize /::<CR>
autocmd FileType haskell vnoremap <LocalLeader>a- :Tabularize /-><CR>
"au BufRead *.py map <buffer> <F5> :w<CR>:!/usr/bin/env python % <CR>
" }}}

"plugin setting{{{
" coc 2019-08-13 16:22 {{{
if exists('g:plugs["coc.nvim"]')
    " TextEdit might fail if hidden is not set.
    set hidden

    " Some servers have issues with backup files, see #649.
    set nobackup
    set nowritebackup

    " Give more space for displaying messages.
    set cmdheight=2

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=300

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
        " Recently vim can merge signcolumn and number column into one
        set signcolumn=number
    else
        set signcolumn=yes
    endif

    " Make <CR> auto-select the first completion item and notify coc.nvim to
    " format on enter, <cr> could be remapped by other vim plugin
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        elseif (coc#rpc#ready())
            call CocActionAsync('doHover')
        else
            execute '!' . &keywordprg . " " . expand('<cword>')
        endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
        autocmd!
        " Setup formatexpr specified filetype(s).
        autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        " Update signature help on jump placeholder.
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>ac  <Plug>(coc-codeaction)

    " Remap <C-f> and <C-b> for scroll float windows/popups.
    if has('nvim-0.4.0') || has('patch-8.2.0750')
        nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
        nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
        inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
        inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
        vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
        vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    endif

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
    " my config
    " CocInstall coc-json coc-css coc-tsserver coc-eslint coc-prettier 
    " temporal using
    inoremap <silent><expr> <c-_> coc#refresh()
    " TAB like VSCode. ref: coc.txt
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? coc#_select_confirm() :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()
	function! s:check_back_space() abort
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~# '\s'
	endfunction

    nmap <leader>es  <Plug>(coc-fix-current)
    command! -nargs=0 Prettier :CocCommand prettier.formatFile
    autocmd FileType vimwiki,markdown let b:coc_suggest_disable = 1
    nnoremap <silent> <Leader>k :call <SID>show_documentation()<CR>
    command! -nargs=0 ReloadRustAnalyzerServer :CocCommand rust-analyzer.reload
    " overwrite Autoformat;
    autocmd FileType javascript,typescript,typescriptreact,json,javascriptreact,typescript.tsx nnoremap <Leader>ef :Prettier<CR>
endif
" end coc config}}}
"let g:polyglot_disabled = ['rust']
" ale
"let g:ale_javascript_eslint_executable = 'eslint_d'
"let g:ale_javascript_eslint_options = '--fix'
let g:ale_fixers = {
\   'javascript': ['eslint'],
\   'rust': ['rustc'],
\   'python': ['autopep8'],
\   'vue': ['eslint'],
\}
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
"" syntastic
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_rust_checkers = ['rustc', 'cargo']
" add an autocmd after vim started to execute checktime for *.js files on write
"au VimEnter *.js au BufWritePost *.js checktime
"UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:snips_email="zhifengle@gmail.com"
let g:snips_author="22earth"
let g:snips_github="22earth"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "mycoolsnippets"]
"emmet
"let g:user_emmet_leader_key='<C-Z>'
"let g:user_emmet_expandabbr_key = '<Tab>'
let g:user_emmet_install_global = 0
autocmd fileType html,css,wiki,markdown,htmldjango,javascript,vue EmmetInstall
" indent_guides随 vim 自启动
let g:indent_guides_enable_on_vim_startup=0
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1

"html.vim
:let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
"NERDTree,提供查看文件折叠/展开列表功能
nnoremap <Leader>2 :NERDTreeToggle<CR>
"nnoremap <Leader>3 :call plug#load('tagbar')<CR>:TagbarToggle<CR>
nnoremap <Leader>3 :TagbarToggle<CR>
let tagbar_left=1
let g:tagbar_autofocus=1
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/](\.(git|hg|svn))|(node_modules|dist)|(debug)',
            \ 'file': '\v\.(exe|so|dll)$',
            \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
            \ }
"au BufRead,BufNewFile *.scm,*rkt let g:AutoPairsLoaded = 0
let g:AutoPairsFlyMode = 1
" supertab {{{
if exists('g:plugs["supertab"]')
    function! s:E_change_dir_toggle()
        if !exists('g:E_change_dir_toggle_flag')
            let g:E_change_dir_toggle_flag = 1
        endif
        " Enable if the group was previously disabled
        if (g:E_change_dir_toggle_flag == 1)
            let g:E_change_dir_toggle_flag = 0
            augroup E_group_change_dir
                autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
                autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)
            augroup END
        else    " Clear the group if it was previously enabled
            let g:E_change_dir_toggle_flag = 1

            " resetting the augroup
            augroup E_group_change_dir
                autocmd!
            augroup END
        endif
    endfunction
    nnoremap <Leader>4 :call <SID>E_change_dir_toggle()<CR>
    let g:SuperTabDefaultCompletionType = "context"
    "let g:SuperTabContextDefaultCompletionType = "<c-p>"
    "let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
    "let g:SuperTabContextDiscoverDiscovery = ["&omnifunc:<c-x><c-o>"]
    let g:SuperTabClosePreviewOnPopupClose = 1
    autocmd FileType python setlocal omnifunc=jedi#completions
    "let g:tern_map_keys = 1
    autocmd FileType javascript nnoremap <Leader>d :TernDef<CR>
    autocmd FileType javascript nnoremap <Leader>k :TernDoc<CR>
    autocmd FileType rust nmap <Leader>k <Plug>(rust-doc)
    autocmd FileType rust nmap gd <Plug>(rust-def)
    autocmd FileType rust nmap <Leader>d <Plug>(rust-def)
    autocmd FileType rust nmap <Leader>gs <Plug>(rust-def-split)
    autocmd FileType rust nmap <Leader>gx <Plug>(rust-def-vertical)
    autocmd FileType *
                \if &omnifunc != '' |
                \call SuperTabChain(&omnifunc, "<c-p>") |
                \call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
                \endif
    "jedi 设置
    if has('python3')
        let g:jedi#force_py_version = 3
    endif
    "let g:jedi#auto_initialization = 0
    "let g:jedi#goto_assignments_command = "<Leader>g"
    "let g:jedi#goto_definitions_command = "<Leader>d"
    "let g:jedi#documentation_command = "K"
    "let g:jedi#usages_command = "<Leader>n"
    "let g:jedi#completions_command = "<A-1>"
    "let g:jedi#rename_command = "<Leader>r"
    "let g:jedi#show_call_signatures = "1"
endif
" }}}
autocmd filetype javascript let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

"let g:paste_easy_enable=0 "vim-paste-easy
"let g:paste_easy_message=0
let g:fzf_action = {
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-i': 'split',
            \ 'ctrl-x': 'split',
            \ 'ctrl-s': 'vsplit',
            \ 'ctrl-v': 'vsplit' }

if executable('rg')
    set grepprg=rg\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif
" plugin setting end}}}

" 插入文件头{{{
"新建.c,.h,.sh,.java文件，自动插入文件头
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"
""定义函数SetTitle，自动插入文件头
func! SetTitle()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1,"\#!/bin/bash")
        call append(line("."), "")
    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."),"# coding=utf-8")
        call append(line(".")+1, "")
    elseif &filetype == 'mkd'
        call setline(1,"<head><meta charset=\"UTF-8\"></head>")
    else
        call setline(1, "/*************************************************************************")
        call append(line("."),   "  > File Name:     ".expand("%"))
        call append(line(".")+1, "  > Author:        22earth")
        call append(line(".")+2, "  > Mail:          zhifengle@gmail.com ")
        call append(line(".")+3, "  > Created Time:  ".strftime("%c"))
        call append(line(".")+4, " ************************************************************************/")
        call append(line(".")+5, "")
    endif
    if &filetype == 'cpp'
        call append(line(".")+6, "#include<iostream>")
        call append(line(".")+7, "using namespace std;")
        call append(line(".")+8, "")
    endif
    if &filetype == 'c'
        call append(line(".")+6, "#include<stdio.h>")
        call append(line(".")+7, "")
    endif
    "新建文件后，自动定位到文件末尾
endfunc
autocmd BufNewFile * normal G
" }}}
"""""""""""""""""
"  try to use   "
"""""""""""""""""
"some settings for trying{{{
"let g:AutoPairsShortcutBackInsert = '<M-b>'
"set complete+=k
autocmd BufRead,BufNewFile *.md nmap <F5> :w<CR>:set syntax=markdown<CR>
"autocmd BufRead,BufNewFile *.md setlocal filetype=vimwiki.markdown
"let g:python3_host_prog = '/home/alan/.pyenv/versions/env3/bin/python3'
let g:vimwiki_valid_html_tags='b,i,s,u,sub,sup,kbd,br,hr,div,del,code'
let g:Modeliner_format = 'sts= sw= ts= et'
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
"let g:airline#extensions#tabline#enabled = 1
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci

if has("unix") && executable("rg")
    function! s:findFile(str)
        "let l:args = "find ./ -mtime -7 -type f -exec rg --vimgrep '". a:str . "' {} \\\;"
        let l:args = "find ./ -ctime -7 -type f -print0 | xargs -0 rg --vimgrep " . a:str . " | awk -F : '!a[$1]++'"

        cexpr! system(l:args)
    endfunction
    command! -bar -bang -complete=file -nargs=? FindFile7
                \ execute s:findFile(<q-args>)
endif

" textobj 2019-06-26
" function: f  param: ,  syntax: y indent: i
" call textobj#user#plugin('datetime', {
" \   'date': {
" \     'pattern': '\<\d\d\d\d-\d\d-\d\d\>',
" \     'select': ['ad', 'id'],
" \   },
" \ })
"let g:polyglot_disabled = ['css']
" vim: set et fenc=utf-8 ff=unix sts=4 sw=4 ts=4 :

"}}}
